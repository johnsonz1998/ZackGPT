#!/usr/bin/env python3
"""
Quick setup script for ZackGPT API keys and web search.
"""

import os
import sys
from pathlib import Path

def setup_api_keys():
    """Interactive setup for API keys."""
    print("🔑 ZackGPT API Key Setup")
    print("=" * 40)
    
    env_file = Path(".env")
    
    # Read existing .env content
    env_content = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_content[key.strip()] = value.strip()
    
    print("Current API Key Status:")
    keys_status = {
        'OPENAI_API_KEY': 'OpenAI API Key (Required)',
        'SERPAPI_KEY': 'SerpAPI Key (Web Search - Recommended)',
        'GOOGLE_API_KEY': 'Google API Key (Alternative)',
        'GOOGLE_CSE_ID': 'Google CSE ID (With Google API)',
        'ELEVENLABS_API_KEY': 'ElevenLabs API Key (Voice - Optional)'
    }
    
    for key, description in keys_status.items():
        current = env_content.get(key, '')
        status = "✅ Set" if current else "❌ Not set"
        masked = f"***{current[-4:]}" if len(current) > 4 else "***" if current else "Not set"
        print(f"  {status} {description}: {masked}")
    
    print("\n" + "=" * 40)
    print("Enter new API keys (press Enter to skip):\n")
    
    updates = {}
    
    # OpenAI Key
    openai_key = input("OpenAI API Key (sk-...): ").strip()
    if openai_key:
        updates['OPENAI_API_KEY'] = openai_key
    
    # SerpAPI Key
    print("\n🔍 Web Search Setup:")
    print("Get a free SerpAPI key at: https://serpapi.com")
    serpapi_key = input("SerpAPI Key (optional): ").strip()
    if serpapi_key:
        updates['SERPAPI_KEY'] = serpapi_key
    
    # Google Keys
    google_key = input("Google API Key (alternative to SerpAPI): ").strip()
    if google_key:
        updates['GOOGLE_API_KEY'] = google_key
        google_cse = input("Google Custom Search Engine ID: ").strip()
        if google_cse:
            updates['GOOGLE_CSE_ID'] = google_cse
    
    # ElevenLabs Key
    elevenlabs_key = input("ElevenLabs API Key (voice, optional): ").strip()
    if elevenlabs_key:
        updates['ELEVENLABS_API_KEY'] = elevenlabs_key
    
    if not updates:
        print("No updates provided.")
        return False
    
    # Update env_content with new keys
    env_content.update(updates)
    
    # Ensure web search is enabled
    env_content['WEB_SEARCH_ENABLED'] = 'true'
    env_content['WEB_SEARCH_MAX_RESULTS'] = '5'
    env_content['DEBUG_MODE'] = 'true'
    
    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# ZackGPT Configuration\n")
        f.write("# Generated by quick_setup.py\n\n")
        
        # Core settings first
        core_settings = ['WEB_SEARCH_ENABLED', 'WEB_SEARCH_MAX_RESULTS', 'DEBUG_MODE']
        for key in core_settings:
            if key in env_content:
                f.write(f"{key}={env_content[key]}\n")
        
        f.write("\n# API Keys\n")
        for key, value in env_content.items():
            if key not in core_settings:
                f.write(f"{key}={value}\n")
    
    print(f"\n✅ Updated {len(updates)} API keys successfully!")
    print(f"📝 Configuration saved to {env_file}")
    
    return True

def test_web_search():
    """Test web search functionality."""
    print("\n🔍 Testing Web Search")
    print("=" * 30)
    
    try:
        # Reload environment variables
        from dotenv import load_dotenv
        load_dotenv(override=True)
        
        sys.path.insert(0, str(Path(__file__).parent))
        from app.web_search import search_web, WEB_SEARCH_ENABLED
        
        print(f"Web search enabled: {WEB_SEARCH_ENABLED}")
        
        if WEB_SEARCH_ENABLED:
            print("Testing web search with: 'Python programming'")
            results = search_web("Python programming", max_results=2)
            if results and len(results) > 50:
                print("✅ Web search working!")
                print(f"Preview: {results[:200]}...")
                return True
            else:
                print("❌ Web search returned no results")
                return False
        else:
            print("❌ Web search is disabled")
            return False
            
    except Exception as e:
        print(f"❌ Web search error: {e}")
        return False

def test_chat_integration():
    """Test if web search integrates with chat."""
    print("\n💬 Testing Chat Integration")
    print("=" * 30)
    
    try:
        # Test search detection
        search_queries = [
            "What's the current weather?",
            "Search for Python tutorials",
            "What's the latest AI news?"
        ]
        
        print("Testing search detection:")
        for query in search_queries:
            # Simple detection logic
            needs_search = any(trigger in query.lower() for trigger in [
                "current", "latest", "search", "weather", "news", "price"
            ])
            status = "🔍 SEARCH" if needs_search else "💬 CHAT"
            print(f"  {status}: '{query}'")
        
        return True
        
    except Exception as e:
        print(f"❌ Chat integration error: {e}")
        return False

def main():
    """Main setup function."""
    print("🚀 ZackGPT Quick Setup & Test\n")
    
    # Setup API keys
    keys_updated = setup_api_keys()
    
    # Test web search
    search_working = test_web_search()
    
    # Test chat integration
    chat_working = test_chat_integration()
    
    print("\n" + "=" * 50)
    
    if keys_updated and search_working and chat_working:
        print("🎉 ZackGPT Setup Complete!")
        print("\n📋 Next Steps:")
        print("1. Start backend: python3 -m uvicorn app.web_api:app --host 0.0.0.0 --port 8000")
        print("2. Start frontend: cd ui/zackgpt-ui && ng serve")
        print("3. Open http://localhost:4200")
        print("4. Try asking: 'What's the latest news about AI?'")
        print("\n🔍 Web Search Ready!")
        print("- DuckDuckGo: Always available (no API key needed)")
        if os.getenv('SERPAPI_KEY'):
            print("- SerpAPI: ✅ Configured")
        if os.getenv('GOOGLE_API_KEY') and os.getenv('GOOGLE_CSE_ID'):
            print("- Google Custom Search: ✅ Configured")
        
    else:
        print("❌ Setup incomplete. Check the issues above.")
        
        if not search_working:
            print("\n🔧 Web Search Troubleshooting:")
            print("- Check internet connection")
            print("- Verify .env file has WEB_SEARCH_ENABLED=true")
            print("- Try adding a SerpAPI key for better results")

if __name__ == "__main__":
    main() 