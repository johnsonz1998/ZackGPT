[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "zackgpt"
description = "Advanced AI Assistant Platform with Evolutionary Prompt Learning"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "ZackGPT Team"},
]
keywords = ["ai", "assistant", "gpt", "chatbot", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]

dependencies = [
    "openai>=1.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "websockets>=11.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.28.0",
    "aiosqlite>=0.19.0",
    "numpy>=1.21.0",
    "pymongo>=4.0.0",
    "tiktoken>=0.4.0",
    "beautifulsoup4>=4.11.0",
    "sounddevice>=0.4.0",
    "openai-whisper>=20230314",
    "scipy>=1.9.0",
    "networkx>=2.8",
    "sympy>=1.11",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
zackgpt = "src.zackgpt.cli.chat:main"
zackgpt-web = "src.zackgpt.web.web_api:main"

[project.urls]
Homepage = "https://github.com/zackgpt/zackgpt"
Repository = "https://github.com/zackgpt/zackgpt"
Documentation = "https://github.com/zackgpt/zackgpt/docs"
"Bug Tracker" = "https://github.com/zackgpt/zackgpt/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["zackgpt*"]

[tool.setuptools.package-data]
zackgpt = ["prompts/*.txt", "config/*.json", "config/*.yaml"]

[tool.setuptools_scm]
write_to = "src/zackgpt/_version.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/zackgpt",
    "--cov-report=term-missing",
    "--cov-report=html:tests/coverage_html",
    "--cov-branch",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring running services", 
    "e2e: End-to-end tests",
    "performance: Performance and load tests",
    "slow: Tests that take a long time to run",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["zackgpt"]
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["src/zackgpt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 